datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

enum IssueStatus {
  open
  resolved
  unresolved
  closed
}

enum IssueCategory {
  leave_policy
  password_reset
  benefits_info
  hardware_issue
  payroll_info
  software_issue
  onboarding_offboarding
}

enum CommunicationChannel {
  slack
  teams
  gmail
  zoom
  yammer
}

model Issue {
  id              Int                  @id @default(autoincrement())
  created_at      DateTime             @default(now())
  updated_at      DateTime             @updatedAt
  resolved_at     DateTime?
  issue_id        String               @unique
  conversation_id String
  celery_task_id  String
  org_name        String               @default("")
  channel         CommunicationChannel
  org_id          String
  organization    Organization         @relation(fields: [org_id], references: [clerk_id], onDelete: Cascade)
  employee_id     String
  employee_name   String               @default("")
  employee_email  String               @default("")
  category        IssueCategory
  messageHistory  String               @db.LongText
  status          IssueStatus
  is_satisfied    Boolean
  reason          String?

  @@index([org_id])
}

model Organization {
  id                    Int      @id @default(autoincrement())
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  clerk_id              String   @unique
  name                  String   @default("")
  slug                  String   @default("")
  slack_auth_state_id   String   @default("")
  zendesk_auth_state_id String   @default("")
  users                 User[]
  issues                Issue[]
  slack                 Slack?
  zendesk               Zendesk?
}

model Slack {
  id               Int          @id @default(autoincrement())
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  org_id           String       @unique
  organization     Organization @relation(fields: [org_id], references: [clerk_id], onDelete: Cascade)
  access_token     String       @default("")
  team_id          String       @default("")
  team_name        String       @default("")
  bot_id           String       @default("")
  bot_access_token String       @default("")
  scopes           String       @default("")

  @@index([org_id])
}

enum OrganizationRole {
  admin
  manager
  member
}

model User {
  id                     Int              @id @default(autoincrement())
  created_at             DateTime         @default(now())
  updated_at             DateTime         @updatedAt
  clerk_id               String           @unique
  organization_id        String           @default("")
  email                  String           @unique
  firstname              String
  lastname               String
  fullname               String
  stripe_customer_id     String?
  stripe_payment_method  String?
  stripe_subscription_id String?
  organization           Organization     @relation(fields: [organization_id], references: [clerk_id], onDelete: Cascade)
  role                   OrganizationRole @default(value: admin)

  @@index([organization_id])
}

model Zendesk {
  id            Int          @id @default(autoincrement())
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  org_id        String       @unique
  organization  Organization @relation(fields: [org_id], references: [clerk_id], onDelete: Cascade)
  access_token  String
  subdomain     String
  account_email String       @default("")
  account_id    String       @default("")
  guide         Boolean      @default(false)
  support       Boolean      @default(false)
  active        Boolean      @default(true)

  @@index([org_id])
}
